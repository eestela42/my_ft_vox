README

chunk-x-y-z-face-vert








Recupere de scop (projet affichage objet 3d) :
	-affichage d'un objet 3d
	-rotation de l'objet
  -zoom et dezoom
  -compteur de fps

Ancienne class -> mesh (il reste des reliques de cette class dans le code a ignorer)
Nouvelle class -> chunk

Dans le main :
  game.init() :
  - init cree le context opengl
  - cree le chunk
  - cree les [vertexes + info] et triangles a partir du chunk

(open gl prends 2 tableaux de donnes le VBO et le EBO)
(le VBO contient les infos par vertexes, donc position, couleur, normale, texture...)
(le EBO contient les indices des vertexes (du VBO) pour former les triangles)

  game.initShadder game.initBuffers :
  - sont explicit (le VAO ca sert a faire des trucs bizarre je connais pas)



  -Matrices de rotations /view / projection
(glUniform = des variables que l'on passe au shader commun a tous les vertexes)

  -gestion des fps

  Boucle while(!shoudlNotClose) :
  -glDrawElements : dessine les triangles    


  Creation des triangles a partir des cubes :

  a partir de la pos du cube cree les 8 vertexes en utilisant une var de 3 bits (ThreeBitVariable dans le code)
  donc de toutes les combinaisons de 3 bits 
  bit[0-1-2] si bit[0] == 1 alors pos.x = cub_pos.x + 1 etc...

  puis on cree les triangles a partir des combinaisons de var de  3 bits
  logique actuelle (ne marche pas ou mal appliquee) :
	- chaque face = toutes les combinaisons de 3 bits qui ont la meme value sur l'un des bits

000 001 010 011 100 101 110 111

face A 000 001 010 011
face B 100 101 110 111
face C 000 001 100 101
face D 010 011 110 111
face E 000 010 100 110
face F 001 011 101 111



